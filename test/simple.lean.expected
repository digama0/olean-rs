version: 3.4.2, commit cbd2b6686ddb
uses sorry: false
imports: [init, system.io]

===================
ExportDecl([anonymous], ExportDecl { ns: option, as_: [anonymous], had_explicit: true, except_names: [], renames: [(none, option.none), (some, option.some)] })
ExportDecl([anonymous], ExportDecl { ns: bool, as_: [anonymous], had_explicit: true, except_names: [], renames: [(ff, bool.ff), (tt, bool.tt)] })
ExportDecl([anonymous], ExportDecl { ns: has_andthen, as_: [anonymous], had_explicit: true, except_names: [], renames: [(andthen, has_andthen.andthen)] })
ExportDecl([anonymous], ExportDecl { ns: has_pow, as_: [anonymous], had_explicit: true, except_names: [], renames: [(pow, has_pow.pow)] })
ExportDecl([anonymous], ExportDecl { ns: has_append, as_: [anonymous], had_explicit: true, except_names: [], renames: [(append, has_append.append)] })
ExportDecl([anonymous], ExportDecl { ns: decidable, as_: [anonymous], had_explicit: true, except_names: [], renames: [(is_true, decidable.is_true), (is_false, decidable.is_false), (to_bool, decidable.to_bool)] })
ExportDecl([anonymous], ExportDecl { ns: has_pure, as_: [anonymous], had_explicit: true, except_names: [], renames: [(pure, has_pure.pure)] })
ExportDecl([anonymous], ExportDecl { ns: has_bind, as_: [anonymous], had_explicit: true, except_names: [], renames: [(bind, has_bind.bind)] })
ExportDecl([anonymous], ExportDecl { ns: has_monad_lift_t, as_: [anonymous], had_explicit: true, except_names: [], renames: [(monad_lift, has_monad_lift_t.monad_lift)] })
ExportDecl([anonymous], ExportDecl { ns: monad_functor_t, as_: [anonymous], had_explicit: true, except_names: [], renames: [(monad_map, monad_functor_t.monad_map)] })
ExportDecl([anonymous], ExportDecl { ns: monad_run, as_: [anonymous], had_explicit: true, except_names: [], renames: [(run, monad_run.run)] })
ExportDecl([anonymous], ExportDecl { ns: list, as_: [anonymous], had_explicit: true, except_names: [], renames: [(mmap, list.mmap), (mmap', list.mmap'), (mfilter, list.mfilter), (mfoldl, list.mfoldl)] })
ExportDecl(native.nat_map, ExportDecl { ns: native.rb_map, as_: [anonymous], had_explicit: false, except_names: [mk], renames: [] })
ExportDecl(name_map, ExportDecl { ns: native.rb_map, as_: [anonymous], had_explicit: false, except_names: [mk], renames: [] })
ExportDecl(expr_map, ExportDecl { ns: native.rb_map, as_: [anonymous], had_explicit: false, except_names: [mk], renames: [] })
ExportDecl(tactic, ExportDecl { ns: interaction_monad, as_: [anonymous], had_explicit: false, except_names: [failed, fail], renames: [] })
ExportDecl(tactic_result, ExportDecl { ns: interaction_monad.result, as_: [anonymous], had_explicit: false, except_names: [], renames: [] })
ExportDecl(tactic, ExportDecl { ns: tactic.transparency, as_: [anonymous], had_explicit: true, except_names: [], renames: [(reducible, tactic.transparency.reducible), (semireducible, tactic.transparency.semireducible)] })
ExportDecl([anonymous], ExportDecl { ns: tactic, as_: [anonymous], had_explicit: true, except_names: [], renames: [(mk_simp_attr, tactic.mk_simp_attr)] })
ExportDecl([anonymous], ExportDecl { ns: monad_except, as_: [anonymous], had_explicit: true, except_names: [], renames: [(throw, monad_except.throw), (catch, monad_except.catch)] })
ExportDecl([anonymous], ExportDecl { ns: monad_except_adapter, as_: [anonymous], had_explicit: true, except_names: [], renames: [(adapt_except, monad_except_adapter.adapt_except)] })
ExportDecl([anonymous], ExportDecl { ns: monad_state_adapter, as_: [anonymous], had_explicit: true, except_names: [], renames: [(adapt_state, monad_state_adapter.adapt_state)] })
ExportDecl([anonymous], ExportDecl { ns: monad_reader, as_: [anonymous], had_explicit: true, except_names: [], renames: [(read, monad_reader.read)] })
ExportDecl([anonymous], ExportDecl { ns: monad_reader_adapter, as_: [anonymous], had_explicit: true, except_names: [], renames: [(adapt_reader, monad_reader_adapter.adapt_reader)] })
ExportDecl([anonymous], ExportDecl { ns: is_lawful_functor, as_: [anonymous], had_explicit: true, except_names: [], renames: [(map_const_eq, is_lawful_functor.map_const_eq), (id_map, is_lawful_functor.id_map), (comp_map, is_lawful_functor.comp_map)] })
ExportDecl([anonymous], ExportDecl { ns: is_lawful_applicative, as_: [anonymous], had_explicit: true, except_names: [], renames: [(seq_left_eq, is_lawful_applicative.seq_left_eq), (seq_right_eq, is_lawful_applicative.seq_right_eq), (pure_seq_eq_map, is_lawful_applicative.pure_seq_eq_map), (map_pure, is_lawful_applicative.map_pure), (seq_pure, is_lawful_applicative.seq_pure), (seq_assoc, is_lawful_applicative.seq_assoc)] })
ExportDecl([anonymous], ExportDecl { ns: is_lawful_monad, as_: [anonymous], had_explicit: true, except_names: [], renames: [(bind_pure_comp_eq_map, is_lawful_monad.bind_pure_comp_eq_map), (bind_map_eq_seq, is_lawful_monad.bind_map_eq_seq), (pure_bind, is_lawful_monad.pure_bind), (bind_assoc, is_lawful_monad.bind_assoc)] })
